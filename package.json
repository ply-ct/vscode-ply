{
  "name": "vscode-ply",
  "displayName": "Ply",
  "description": "Automated Testing for REST and GraphQL APIs",
  "icon": "icons/ply.png",
  "version": "2.1.0-beta.6",
  "license": "MIT",
  "author": {
    "name": "Donald Oakes",
    "email": "donald.h.oakes@gmail.com"
  },
  "publisher": "ply-ct",
  "homepage": "https://ply-ct.org/",
  "repository": {
    "type": "git",
    "url": "https://github.com/ply-ct/vscode-ply.git"
  },
  "bugs": {
    "url": "https://github.com/ply-ct/vscode-ply/issues"
  },
  "keywords": [
    "rest",
    "api",
    "graphql",
    "automated",
    "continuous",
    "test",
    "flow",
    "yaml",
    "ply",
    "postman"
  ],
  "categories": [
    "Programming Languages",
    "Linters",
    "Other"
  ],
  "main": "./out/src/extension.js",
  "files": [
    "out/src",
    "out/worker"
  ],
  "scripts": {
    "preinstall": "npm install --prefix web",
    "build": "tsc && npm run build-bundles && npm run build-web",
    "build-bundles": "rollup -c && cp node_modules/flowbee/dist/css/style.css media/css/flowbee.css ",
    "watch-bundles": "rollup --watch -c",
    "build-web": "npm --prefix web run build",
    "compile": "tsc",
    "watch": "tsc -watch",
    "lint": "eslint",
    "test": "TS_NODE_TRANSPILE_ONLY=1 mocha --require ts-node/register test/**/*.ts",
    "vscode:prepublish": "npm install && npm run build && npm prune --production",
    "package": "vsce package"
  },
  "engines": {
    "vscode": "^1.63.1"
  },
  "dependencies": {
    "@ply-ct/ply": "^3.0.24",
    "find-up": "^4.1.0",
    "flowbee": "^0.3.3",
    "vscode-test-adapter-api": "^1.9.0",
    "vscode-test-adapter-util": "^0.7.1",
    "vscode-uri": "^3.0.3",
    "ws": "^8.4.0"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^21.0.1",
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-node-resolve": "^13.1.3",
    "@types/chai": "^4.3.0",
    "@types/mocha": "^9.0.0",
    "@types/node": "^17.0.8",
    "@types/resize-observer-browser": "^0.1.6",
    "@types/vscode": "^1.63.1",
    "@types/ws": "^8.2.2",
    "@typescript-eslint/eslint-plugin": "^5.9.0",
    "@typescript-eslint/parser": "^5.9.0",
    "chai": "^4.3.4",
    "cross-env": "^7.0.3",
    "eslint": "^8.6.0",
    "mocha": "^9.1.3",
    "rollup": "^2.63.0",
    "rollup-plugin-typescript2": "^0.31.1",
    "ts-node": "^10.2.1",
    "typescript": "^4.5.4"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "title": "Ply",
      "properties": {
        "ply.testsLocation": {
          "type": "string",
          "description": "Base directory (absolute or relative to workspace folder) for all Ply request and case files.  Defaults from plyrc if present, otherwise '.'",
          "scope": "resource"
        },
        "ply.requestFiles": {
          "type": "string",
          "description": "Glob pattern for Ply request files, relative to testsLocation ('**/*.{ply.yaml,ply.yml}').",
          "scope": "resource"
        },
        "ply.caseFiles": {
          "type": "string",
          "description": "Glob pattern for Ply case files, relative to testsLocation ('**/*.ply.ts').",
          "scope": "resource"
        },
        "ply.flowFiles": {
          "type": "string",
          "description": "Glob pattern for Ply flow files, relative to testsLocation ('**/*.flow').",
          "scope": "resource"
        },
        "ply.ignore": {
          "type": "string",
          "description": "Glob pattern for places to ignore, relative to testsLocation ('**/{node_modules,bin,dist,out}/**').",
          "scope": "resource"
        },
        "ply.skip": {
          "type": "string",
          "description": "Glob pattern for tests to skip, relative to testsLocation ('').",
          "scope": "resource"
        },
        "ply.expectedLocation": {
          "type": "string",
          "description": "Expected results base dir (testsLocation + '/results/expected').",
          "scope": "resource"
        },
        "ply.actualLocation": {
          "type": "string",
          "description": "Actual results base dir (testsLocation + '/results/actual').",
          "scope": "resource"
        },
        "ply.logLocation": {
          "type": "string",
          "description": "Ply log file base dir (actualLocation).",
          "scope": "resource"
        },
        "ply.logpanel": {
          "type": "boolean",
          "description": "Write detailed vscode-ply output to the Ply Invoker output panel.",
          "default": false,
          "scope": "resource"
        },
        "ply.debugPort": {
          "type": "number",
          "description": "Port to use for debug connections",
          "default": 9229,
          "scope": "resource"
        },
        "ply.debugConfig": {
          "description": "Name of a launch configuration to use for debugging",
          "type": "string",
          "scope": "resource"
        },
        "ply.nodePath": {
          "description": "Path to node executable. Default is to find on your PATH; if not found, use node shipped with VS Code",
          "type": "string",
          "scope": "resource"
        },
        "ply.plyPath": {
          "description": "Path to ply package (relative to workspace folder). Default is to use a bundled version of ply.  To use ply installed in your project's node_modules folder, specify \"node_modules/@ply-ct/ply/dist\"",
          "type": "string",
          "scope": "resource"
        },
        "ply.cwd": {
          "description": "Working directory for Ply test execution (relative to workspace folder)",
          "type": "string",
          "scope": "resource"
        },
        "ply.env": {
          "description": "Environment variables to apply for Ply test execution",
          "type": "object",
          "scope": "resource"
        },
        "ply.useDist": {
          "description": "Import case suite modules from generated .js instead of .ts source.  This same runOption needs to be set in your case's calls to Suite.run.",
          "type": "boolean",
          "default": false,
          "scope": "resource"
        },
        "ply.openSuitesWhenRun": {
          "description": "Automatically open requests/flows in custom editor when executing from Test Explorer",
          "type": "string",
          "enum": [
            "If Single",
            "Always",
            "Never"
          ],
          "default": "If Single",
          "scope": "window"
        },
        "ply.testExplorerUseRequestEditor": {
          "descripton": "When opening individual requests within flow/request suites from Test Explorer, open in Ply request editor",
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "ply.saveBeforeRun": {
          "descripton": "Automatically save dirty test files before running",
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "ply.enableDiffEditorCodeLens": {
          "descripton": "How to handle when vscode setting 'diffEditor.codeLens' is not enabled for a workspace folder that contains ply tests",
          "type": "string",
          "enum": [
            "Prompt",
            "Always",
            "Never"
          ],
          "default": "Prompt",
          "scope": "window"
        },
        "ply.websocketPort": {
          "description": "WebSocket port for Ply flow live updates (0 to disable).\nModify in **Workspace** settings to avoid conflicts.",
          "type": "number",
          "default": 9351,
          "scope": "window"
        }
      }
    },
    "commands": [
      {
        "command": "ply.open-request",
        "title": "Ply: Open Request",
        "icon": {
          "dark": "./icons/open-file-dark.svg",
          "light": "./icons/open-file-light.svg"
        }
      },
      {
        "command": "ply.open-flow",
        "title": "Ply: Open Flow"
      },
      {
        "command": "ply.flow.configurator",
        "title": "Ply: Open Configurator",
        "icon": {
          "dark": "./icons/open-file-dark.svg",
          "light": "./icons/open-file-light.svg"
        }
      },
      {
        "command": "ply.open-cases",
        "title": "Ply: Open Case Suite",
        "icon": {
          "dark": "./icons/open-file-dark.svg",
          "light": "./icons/open-file-light.svg"
        }
      },
      {
        "command": "ply.flow-action",
        "title": "Ply: Flow Action"
      },
      {
        "command": "ply.submit",
        "title": "Ply: Submit"
      },
      {
        "command": "ply.submit-item",
        "title": "Submit",
        "icon": {
          "dark": "./icons/submit-dark.svg",
          "light": "./icons/submit-light.svg"
        }
      },
      {
        "command": "ply.diff",
        "title": "Ply: Compare Result Files"
      },
      {
        "command": "ply.diff-item",
        "title": "Ply: Compare Result Files",
        "icon": {
          "dark": "./icons/fdiff-dark.svg",
          "light": "./icons/fdiff-light.svg"
        }
      },
      {
        "command": "ply.diff.fragment-item",
        "title": "Compare Result Fragments",
        "icon": {
          "dark": "./icons/diff-dark.svg",
          "light": "./icons/diff-light.svg"
        }
      },
      {
        "command": "ply.import.postman",
        "title": "Ply: Import from Postman"
      },
      {
        "command": "ply.import.postman-item",
        "title": "Import from Postman",
        "icon": {
          "dark": "./icons/json-dark.svg",
          "light": "./icons/json-light.svg"
        }
      },
      {
        "command": "ply.new",
        "title": "Ply: New Item"
      },
      {
        "command": "ply.new.request",
        "title": "New Ply Request"
      },
      {
        "command": "ply.new.case",
        "title": "New Ply Case"
      },
      {
        "command": "ply.new.flow",
        "title": "New Ply Flow"
      },
      {
        "command": "ply.flow.mode.select",
        "title": "Ply: Select Mode",
        "enablement": "resourceExtname == .flow"
      },
      {
        "command": "ply.flow.mode.connect",
        "title": "Ply: Connect Mode",
        "enablement": "resourceExtname == .flow"
      },
      {
        "command": "ply.flow.mode.inspect",
        "title": "Ply: Inspect Mode",
        "enablement": "resourceExtname == .flow"
      }
    ],
    "keybindings": [
      {
        "command": "ply.flow.mode.select",
        "key": "ctrl+shift+s",
        "mac": "cmd+alt+s"
      },
      {
        "command": "ply.flow.mode.connect",
        "key": "ctrl+shift+c",
        "mac": "cmd+alt+c"
      },
      {
        "command": "ply.flow.mode.inspect",
        "key": "ctrl+shift+i",
        "mac": "cmd+alt+i"
      },
      {
        "command": "ply.flow.configurator",
        "key": "ctrl+shift+g",
        "mac": "cmd+alt+g"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "ply.new.request",
          "group": "4_import@5",
          "when": "view == test-explorer"
        },
        {
          "command": "ply.new.case",
          "group": "4_import@6",
          "when": "view == test-explorer"
        },
        {
          "command": "ply.new.flow",
          "group": "4_import@7",
          "when": "view == test-explorer"
        },
        {
          "command": "ply.import.postman-item",
          "group": "4_import@8",
          "when": "view == test-explorer"
        }
      ],
      "view/item/context": [
        {
          "command": "ply.new.request",
          "group": "1_plynew@0",
          "when": "view == test-explorer && viewItem == suite"
        },
        {
          "command": "ply.new.case",
          "group": "1_plynew@1",
          "when": "view == test-explorer && viewItem == suite"
        },
        {
          "command": "ply.new.flow",
          "group": "1_plynew@2",
          "when": "view == test-explorer && viewItem == suite"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == suite"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == test"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == suiteWithSource"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == testWithSource"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == debuggableSuite"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == debuggableTest"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == debuggableSuiteWithSource"
        },
        {
          "command": "ply.submit-item",
          "group": "inline@0",
          "when": "view == test-explorer && viewItem == debuggableTestWithSource"
        },
        {
          "command": "ply.import.postman-item",
          "group": "inline@3",
          "when": "view == test-explorer && viewItem == collection"
        },
        {
          "command": "ply.diff-item",
          "group": "inline@4",
          "when": "view == test-explorer && viewItem == suiteWithSource"
        },
        {
          "command": "ply.diff-item",
          "group": "inline@4",
          "when": "view == test-explorer && viewItem == debuggableSuiteWithSource"
        },
        {
          "command": "ply.diff.fragment-item",
          "group": "inline@5",
          "when": "view == test-explorer && viewItem == test"
        },
        {
          "command": "ply.diff.fragment-item",
          "group": "inline@5",
          "when": "view == test-explorer && viewItem == testWithSource"
        },
        {
          "command": "ply.diff.fragment-item",
          "group": "inline@5",
          "when": "view == test-explorer && viewItem == debuggableTest"
        },
        {
          "command": "ply.diff.fragment-item",
          "group": "inline@5",
          "when": "view == test-explorer && viewItem == debuggableTestWithSource"
        },
        {
          "command": "ply.import.postman-item",
          "group": "6_postman",
          "when": "view == test-explorer && viewItem == collection"
        }
      ],
      "commandPalette": [
        {
          "command": "ply.import.postman-item",
          "when": "false"
        },
        {
          "command": "ply.submit-item",
          "when": "false"
        },
        {
          "command": "ply.diff-item",
          "when": "false"
        },
        {
          "command": "ply.diff.fragment-item",
          "when": "false"
        }
      ]
    },
    "customEditors": [
      {
        "viewType": "ply.flow.diagram",
        "displayName": "Ply Flow Diagram",
        "selector": [
          {
            "filenamePattern": "*.flow"
          }
        ],
        "priority": "default"
      },
      {
        "viewType": "ply.request",
        "displayName": "Ply Request",
        "selector": [
          {
            "filenamePattern": "*.ply"
          }
        ],
        "priority": "default"
      }
    ]
  }
}
